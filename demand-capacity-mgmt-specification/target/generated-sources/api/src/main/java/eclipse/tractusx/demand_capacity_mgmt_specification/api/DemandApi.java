/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package eclipse.tractusx.demand_capacity_mgmt_specification.api;

import eclipse.tractusx.demand_capacity_mgmt_specification.model.DemandRequestUpdateDto;
import eclipse.tractusx.demand_capacity_mgmt_specification.model.MaterialDemandRequest;
import eclipse.tractusx.demand_capacity_mgmt_specification.model.MaterialDemandResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Demand", description = "the Demand API")
public interface DemandApi {

    /**
     * DELETE /demand/{demand_id} : delete demand by Id
     *
     * @param demandId  (required)
     * @return Delete demand with id (status code 200)
     */
    @Operation(
        operationId = "deleteDemandsById",
        summary = "delete demand by Id",
        tags = { "Demand" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Delete demand with id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/demand/{demand_id}"
    )
    ResponseEntity<Void> deleteDemandsById(
        @Parameter(name = "demand_id", description = "", required = true) @PathVariable("demand_id") String demandId
    ) throws Exception;


    /**
     * GET /demand/{demand_id} : get demand by Id
     *
     * @param demandId  (required)
     * @return General greeting (status code 200)
     */
    @Operation(
        operationId = "getDemandsById",
        summary = "get demand by Id",
        tags = { "Demand" },
        responses = {
            @ApiResponse(responseCode = "200", description = "General greeting", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaterialDemandResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/demand/{demand_id}",
        produces = { "application/json" }
    )
    ResponseEntity<MaterialDemandResponse> getDemandsById(
        @Parameter(name = "demand_id", description = "", required = true) @PathVariable("demand_id") String demandId
    ) throws Exception;


    /**
     * GET /demand : get list of MaterialsDemand
     *
     * @return General greeting (status code 200)
     */
    @Operation(
        operationId = "getDemandsByProjectID",
        summary = "get list of MaterialsDemand",
        tags = { "Demand" },
        responses = {
            @ApiResponse(responseCode = "200", description = "General greeting", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaterialDemandResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/demand",
        produces = { "application/json" }
    )
    ResponseEntity<List<MaterialDemandResponse>> getDemandsByProjectID(
        
    ) throws Exception;


    /**
     * POST /demand : create a demand
     *
     * @param materialDemandRequest  (required)
     * @return General greeting (status code 200)
     */
    @Operation(
        operationId = "postDemand",
        summary = "create a demand",
        tags = { "Demand" },
        responses = {
            @ApiResponse(responseCode = "200", description = "General greeting", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaterialDemandResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/demand",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MaterialDemandResponse> postDemand(
        @Parameter(name = "MaterialDemandRequest", description = "", required = true) @Valid @RequestBody MaterialDemandRequest materialDemandRequest
    ) throws Exception;


    /**
     * PUT /demand/{demand_id} : update demand by Id
     *
     * @param demandId  (required)
     * @param demandRequestUpdateDto  (required)
     * @return Update of demands (status code 200)
     */
    @Operation(
        operationId = "updateDemandsById",
        summary = "update demand by Id",
        tags = { "Demand" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update of demands", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MaterialDemandResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/demand/{demand_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MaterialDemandResponse> updateDemandsById(
        @Parameter(name = "demand_id", description = "", required = true) @PathVariable("demand_id") String demandId,
        @Parameter(name = "DemandRequestUpdateDto", description = "", required = true) @Valid @RequestBody DemandRequestUpdateDto demandRequestUpdateDto
    ) throws Exception;

}
